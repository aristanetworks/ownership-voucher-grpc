// Copyright (c) 2023 Arista Networks, Inc.
// Use of this source code is governed by the BSD 2-Clause License
// that can be found in the LICENSE file.
syntax = "proto3";

package ovgs.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/aristanetworks/ownership-voucher-grpc/ovgs";

enum UserRole {
  USER_ROLE_UNSPECIFIED = 0;
  USER_ROLE_SUPPORT = 1;      // Read write assocations and certs
  USER_ROLE_ADMIN = 2;        // Read write to everything
  USER_ROLE_REQUESTOR = 3;    // Read only
}

enum AccountType {
  ACCOUNT_TYPE_UNSPECIFIED = 0;
  ACCOUNT_TYPE_USER = 1;
  ACCOUNT_TYPE_SERVICE_ACCOUNT = 2;
}
  
message User {
  // Username or Service Account name.
  string username = 1;     
  // User account type
  AccountType user_type = 2;  
  // org_id = "org-" + org name.
  string org_id = 3;       
  // Role of the user, either ADMIN, SUPPORT or REQUESTOR.
  UserRole user_role = 4;  
}

message CreateGroupRequest {
  // Parent group ID, it could be org ID or a group ID.
  string parent = 1;
  // Description of the group.
  string description = 2;  
}

message CreateGroupResponse {
  string group_id = 1;
}

message GetGroupRequest {
  string group_id = 1;
}

message GetGroupResponse {
  // Group id
  string group_ip = 1;
  // list of certificate ids associated with the group.
  repeated string cert_ids = 2;
  // list of device serial numbers in the group.
  repeated string device_serials = 3;
  // list of users in the group.
  repeated User users = 4;
  // list of group ids that are children of this group.
  repeated string child_group_ids = 5;
  // Description of group
  string description = 6;
}

message DeleteGroupRequest {
  string group_id = 1;
}

message DeleteGroupResponse {
}

message CreateUserRequest {
  string username = 1;     // username or service account name
  string user_type = 2;    // user account type
  string org_id = 3;       // org_id = "org-" + org name
  string group_id = 4;
  UserRole user_role = 5;  // role of the user, either ADMIN or REQUESTOR
}

message CreateUserResponse {
}

message DeleteUserRequest {
  string username = 1;        // username or service account name
  AccountType user_type = 2;  // user account type
  string org_id = 3;          // org_id = "org-" + org name
  string group_id = 4;
}

message DeleteUserResponse {
}

message GetUserRequest {
  string username = 1;     // username or service account name
  string user_type = 2;    // user role type
  string org_id = 3;       // org_id = "org-" + org name
}

message GetUserResponse {
  // mapping from a group to user's role in that group
  map<string, UserRole> groups = 1;
}

message CreateDomainCertRequest {
  string group_id = 1;
  bytes certificate_der = 2;
  bool revocation_checks = 3;
  google.protobuf.Timestamp expiry_time = 4;
}

message CreateDomainCertResponse {
  string cert_id = 1;
}

message GetDomainCertRequest {
  string cert_id = 1;
}

message GetDomainCertResponse {
  string cert_id = 1;
  string group_id = 2;
  bytes certificate_der = 3;
  bool revocation_checks = 4;
  google.protobuf.Timestamp expiry_time = 5;
}

message DeleteDomainCertRequest {
  string cert_id = 1;
}

message DeleteDomainCertResponse {
}

message AddSerialRequest {
  string serial_number = 1;
  string group_id = 2;
}

message AddSerialResponse {
}

message RemoveSerialRequest {
  string serial_number = 1;
  string group_id = 2;
}

message RemoveSerialResponse {
}

message GetSerialRequest {
  string serial_number = 1;
}

message GetSerialResponse {
  // SKU public key (if it exists/if applicable)
  bytes public_key_der = 1;
  // List of groups the serial number belongs to.
  repeated string group_ids = 2;
  // SKU mac address
  string mac_addr = 3;
}

message GetOwnershipVoucherRequest {
  // Serial number for the part to fetch OV.
  string serial_number = 1;
  // Certificate ID to use for OV.
  string cert_id = 2;
  // Lifetime of the OV.
  google.protobuf.Timestamp lifetime = 3;
  // ien is the device vendor's IANA Enterprise Number.
  string ien = 4;
}

message GetOwnershipVoucherResponse {
  bytes voucher_cms = 1; // binary CMS format (rfc5652)
  bytes public_key_der = 2; // ASN.1 DER encoded
}

service OwnershipVoucherService {
  // CreateGroup creates a group as a child of an existing group.
  // Errors will be returned:
  // ALREADY_EXISTS if group already exists
  // PERMISSION_DENIED if the user doesn't have access to the parent group
  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse);
  // DeleteGroup deletes a named group.
  // Errors will be returned:
  // NOT_FOUND if the group doesn't exist
  // FAILED_PRECONDITION if the parent is set but does not exist
  // PERMISSION_DENIED if user doesn't have access to parent group
  rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse);
  // GetGroup returns the domain-certs (keyed by id), serials,
  // and user/role mappings for that group and the children group ids.
  // Errors will be returned:
  // NOT_FOUND if the group doesn't exist
  // PERMISSION_DENIED if the user doesn't have access to the group
  rpc GetGroup(GetGroupRequest) returns (GetGroupResponse);

  // AddUser will create and assign a role to a user in a named group.
  // Username is unique to Org ID and Username.
  // Errors will be returned:
  // ALREADY_EXISTS if user already exists in the group with the role.
  // PERMISSION_DENIED if the user doesn't have access to the group.
  rpc AddUser(CreateUserRequest) returns (CreateUserResponse);
  // DeleteUser removes user with the role from the named group.
  // Username is unique to Org ID and Username.
  // Errors will be returned:
  // NOT_FOUND if the group doesn't exist or if the user and role
  // doesn't exist in the group.
  // PERMISSION_DENIED if user doesn't have access to the group
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  // GetUserRole returns the roles the user is assigned in the group.
  // Username is unique to Org ID and Username.
  // Errors will be returned:
  // NOT_FOUND if the group or the user doesn't exist.
  // PERMISSION_DENIED if the user doesn't have access to the group
  rpc GetUser(GetUserRequest) returns (GetUserResponse);


  // AddSerial assigns the serial to the group.
  // Errors will be returned:
  // ALREADY_EXISTS if serial_number already exists in the group
  // PERMISSION_DENIED if the user doesn't have access to the group
  rpc AddSerial(AddSerialRequest) returns (AddSerialResponse);
  // RemoveSerial removes the serial from the group.
  // Errors will be returned:
  // NOT_FOUND if the serial number or group id doesn't exist
  // PERMISSION_DENIED if user doesn't have access to the group
  rpc RemoveSerial(RemoveSerialRequest) returns (RemoveSerialResponse);
  // GetSerial returns serial number, groups the serial belongs to.
  // Errors will be returned:
  // NOT_FOUND if the serial number or group id doesn't exist.
  // PERMISSION_DENIED if the user doesn't have access to the group
  rpc GetSerial(GetSerialRequest) returns (GetSerialResponse);

  // CreateDomainCert creates the certificate in the group.
  // Errors will be returned:
  // ALREADY_EXISTS if cert already exists in the group
  // PERMISSION_DENIED if the user doesn't have access to the group
  rpc CreateDomainCert(CreateDomainCertRequest) returns (CreateDomainCertResponse);
  // DeleteDomainCert deletes the cert from the database.
  // Errors will be returned:
  // NOT_FOUND if the cert doesn't exist
  // PERMISSION_DENIED if user doesn't have access to the group
  rpc DeleteDomainCert(DeleteDomainCertRequest) returns (DeleteDomainCertResponse);
  // GetDomainCert reveals the details of the certificate.
  // NOT_FOUND if the cert doesn't exist
  // PERMISSION_DENIED if user doesn't have access to the group
  rpc GetDomainCert(GetDomainCertRequest) returns (GetDomainCertResponse);

  // GetOwnershipVoucher issues ownership voucher and returns TPM public 
  // key for the serial number (if it exists/if applicable)
  rpc GetOwnershipVoucher(GetOwnershipVoucherRequest) returns (GetOwnershipVoucherResponse);
}
